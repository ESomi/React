[{"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\index.js":"1","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\reportWebVitals.js":"2","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\components\\PhoneForm.js":"3","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\components\\PhoneInfoList.js":"4","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\components\\PhoneInfo.js":"5","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\App.js":"6","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\Contact.js":"7","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\ContactInfo.js":"8","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\ContactDetails.js":"9"},{"size":614,"mtime":1614080849143,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1234,"mtime":1610006134431,"results":"13","hashOfConfig":"11"},{"size":721,"mtime":1609947765076,"results":"14","hashOfConfig":"11"},{"size":3274,"mtime":1609976906136,"results":"15","hashOfConfig":"11"},{"size":211,"mtime":1614170709074,"results":"16","hashOfConfig":"11"},{"size":2643,"mtime":1614199180509,"results":"17","hashOfConfig":"11"},{"size":283,"mtime":1614170775790,"results":"18","hashOfConfig":"11"},{"size":587,"mtime":1614199525012,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kr25bs",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\index.js",[],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\reportWebVitals.js",[],["40","41"],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\components\\PhoneForm.js",[],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\components\\PhoneInfoList.js",[],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\components\\PhoneInfo.js",["42"],"import React, { Component, Fragment } from 'react';\r\n\r\nclass PhoneInfo extends Component {\r\n\r\n    state ={\r\n        editing: false,\r\n        name: '',\r\n        phone: '',\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state !== nextState) {\r\n            return true;\r\n        }\r\n        return this.props.info !== nextProps.info;\r\n    }\r\n    \r\n\r\n    handleRemove = () => {\r\n        const { info, onRemove } = this.props;\r\n        onRemove(info.id);\r\n    }\r\n\r\n    handleToggleEdit = () => { \r\n        \r\n        const { info, onUpdate } = this.props;\r\n        if (this.state.editing) { // true -> false (적용버튼 눌렀을 때)\r\n        onUpdate(info.id, {\r\n                name: this.state.name,\r\n                phone: this.state.phone,\r\n            });\r\n        /* props로 받은 handleUpdate함수 실행 :\r\n        info의 id값이 information배열의 id 값과 같을 때,\r\n        info의 id값과 state의 name과 phone값을 App.js의 state에 넣어 줌.\r\n        */\r\n        } else { // false -> true (수정버튼 눌렀을 때)\r\n            this.setState({\r\n                name: info.name,\r\n                phone: info.phone,\r\n            });\r\n        // state에 info의 name과 phone 값 넣어 줌.\r\n        } \r\n        \r\n        this.setState({\r\n            editing: !this.state.editing, // editing 값 반전 시킴.\r\n        }) \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value //input 박스에서 받아 온 값들을 확인해서 state의 해당 키의 value로 넣어 줌.\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { name, phone, id } = this.props.info;\r\n        const { editing } = this.state;\r\n\r\n        const style = {\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px',\r\n        };  \r\n\r\n        console.log(name);\r\n\r\n        return (\r\n            <div style = {style}> \r\n             { JSON.stringify(this.state) }\r\n                {\r\n                    editing ? (\r\n                        <Fragment>\r\n                            <div>\r\n                                <input \r\n                                    name=\"name\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.name}/>\r\n                            </div>\r\n                            <div>\r\n                                <input \r\n                                    name=\"phone\" \r\n                                    onChange={this.handleChange} \r\n                                    value={this.state.phone}/>\r\n                            </div>\r\n                        </Fragment>\r\n                        \r\n                    ) : (\r\n                        <Fragment>\r\n                            <div><b>{name}</b></div>                \r\n                            <div><b>{phone}</b></div>\r\n                        </Fragment>\r\n                    )\r\n                }\r\n                <button onClick={this.handleRemove}>삭제</button>\r\n                <button onClick={this.handleToggleEdit}>\r\n                    { editing ? '적용' : '수정' }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneInfo;","C:\\Users\\some7\\react-tutorials\\contact-app\\src\\App.js",[],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\Contact.js",["43","44"],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\ContactInfo.js",[],"C:\\Users\\some7\\react-tutorials\\contact-app\\src\\ContactDetails.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":56,"column":30,"nodeType":"51","messageId":"52","endLine":56,"endColumn":32},{"ruleId":"49","severity":1,"message":"53","line":1,"column":17,"nodeType":"51","messageId":"52","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"55","line":77,"column":50,"nodeType":"56","messageId":"57","endLine":77,"endColumn":52},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'Component' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]